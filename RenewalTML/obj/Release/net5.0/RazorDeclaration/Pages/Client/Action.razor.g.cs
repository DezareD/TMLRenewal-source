// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace RenewalTML.Pages.Client
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
#nullable restore
#line 1 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Designing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Navigation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Transactions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Clients;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Admin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Exstention.ClassAddons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Exstention;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Pages.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Blazorise;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data.JSInteropHelper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Blazorise.Utilities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Linq.Expressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\Pages\Client\Action.razor"
using RenewalTML.Data.Dto.Admin;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/profile/{userId:int}/actions")]
    public partial class Action : RenewalTMLComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 188 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\Pages\Client\Action.razor"
       
    [Parameter]
    public int UserId { get; set; }

    private Client user { get; set; }
    private Client viewer { get; set; }

    private string CurrentAction { get; set; }
    private bool isEconomicBlocked { get; set; }

    /* TRANSFER */

    private ContextValidationModule<SendMoneyUserToUser> _sendMoneyModule { get; set; }
    private ValidationMessageBlock TransferMoneyInformation { get; set; }
    private ValidationMessageBlock TransferMoneyError { get; set; }

    private bool transferLoader { get; set; }

    /* REQUEST MONEY */

    private ContextValidationModule<RequestMoneyModel> _requestMoneyModule { get; set; }
    private MultiImageForm _refMultiImageForm { get; set; }

    private ValidationMessageBlock RequestMoneyInformation { get; set; }
    private ValidationMessageBlock RequestMoneyError { get; set; }
    private bool isStartRequestMoney { get; set; }

    /* OTHER */

    private List<string> ActionList = new List<string>()
{
        "transferMoney",
        "requestMoney",
        "loading"
    };

    // TODO: Баг с загрузкой фоток в большом количества
    // TODO: Сделать отдельную страничку с вашими заявками.

    // request money

    private async Task StartRequest()
    {
        //var textRequest = await RefDataInformationRequest.GetData(false);

        if (isStartRequestMoney)
        {
            RequestMoneyError = new ValidationMessageBlock("Дождитесь окончания загрузки предидущего действия...", "error");
            await _js.InvokeVoidAsync("ScrollHelper.ScrollToTop");
            StateHasChanged();
            return;
        }

        if (_refMultiImageForm.isStartImageUpload)
        {
            RequestMoneyError = new ValidationMessageBlock("Дождитесь окончания загрузки изоображений.", "error");
            _requestMoneyModule.SetFieldStatus("FillTicketImage", ValidationStatus.Error);
            await _js.InvokeVoidAsync("ScrollHelper.ScrollToTop");
            StateHasChanged();
            return;
        }

        isStartRequestMoney = true;
        StateHasChanged();

        if (_requestMoneyModule._model.Money <= 0)
        {
            RequestMoneyError = new ValidationMessageBlock("Введено неверное количество.", "error");
            _requestMoneyModule.SetFieldStatus("Money", ValidationStatus.Error);
            isStartRequestMoney = false;
            await _js.InvokeVoidAsync("ScrollHelper.ScrollToTop");
            StateHasChanged();
            return;
        }

        await _ticketServices.CreateTicket(new Ticket()
        {
            SystemName = "Заявка на пополнения баланса",
            Date = DateTimeAddon.NowDateTimeStrings(),
            SystemInformation = "Заявка на пополнения счёта от пользователя " + viewer.UserName + ", на сумму: " + _requestMoneyModule._model.Money,
            TicketStatus = "status_waiting",
            TicketType = "type_fillingBalance",
            UserCreateId = viewer.Id,
            JsonObject = JsonConvert.SerializeObject(new FillBalanceTicketModel()
            {
                CountMoney = _requestMoneyModule._model.Money,
                ImagesIds = _requestMoneyModule._model.FillTicketImage.Select(m => m.ImageId).ToList(),
                TextInformation = _requestMoneyModule._model.Text
            })
        });

        // TODO: Изменить картинки, что бы не удалялиь через час

        //await RefDataInformationRequest.ClearMarkDown();

        isStartRequestMoney = false;
        RequestMoneyError = new ValidationMessageBlock("Заявка успешно подана.", "ok");

        _requestMoneyModule.SetFielAllStatus(ValidationStatus.None);

        _requestMoneyModule._model.FillTicketImage = ComponentUtils.MultiImageFormRecreate();
        _requestMoneyModule._model.Money = 0;
        _requestMoneyModule._model.Text = "";

        await _js.InvokeVoidAsync("ScrollHelper.ScrollToTop");

        StateHasChanged();
    }

    // transfer

    // TODO: Как только появятся настройки экономики ТМЛ добавить сюда нормальный процент а пока 5.3%

    private async Task StartTransfer()
    {
        if (transferLoader)
        {
            TransferMoneyError = new ValidationMessageBlock("Дождитесь окончания загрузки предидущего действия...", "error");
            _sendMoneyModule.SetFielAllStatus(ValidationStatus.None);
            await _js.InvokeVoidAsync("ScrollHelper.ScrollToTop");
            StateHasChanged();
            return;
        }

        transferLoader = true;
        StateHasChanged();

        if (_sendMoneyModule._model.Money <= 99 || _sendMoneyModule._model.Money > user.Balance)
        {
            TransferMoneyError = new ValidationMessageBlock("Недостаточно средств или введено неверное количество.", "error");
            _sendMoneyModule.SetFieldStatus("Money", ValidationStatus.Error);
            transferLoader = false;
            await _js.InvokeVoidAsync("ScrollHelper.ScrollToTop");
            StateHasChanged();
            return;
        }

        var userFind = await _userServices.FindUserByNickname(_sendMoneyModule._model.UserName);
        var userList = await _userServices.GetAllFilterClient(false, false);

        if (userFind == null || userFind.Id == user.Id || userList.Where(m => m.Id == userFind.Id).Count() <= 0)
        {
            _sendMoneyModule.SetFieldStatus("UserName", ValidationStatus.Error);
            TransferMoneyError = new ValidationMessageBlock("Пользователь для перевода не найден или пользователь не валиден.", "error");
            transferLoader = false;
            await _js.InvokeVoidAsync("ScrollHelper.ScrollToTop");
            StateHasChanged();
            return;
        }

        await _economicServices.CompleteTransferPay(user, userFind, _sendMoneyModule._model.SpendMoney, _sendMoneyModule._model.TransMoney);

        TransferMoneyError = new ValidationMessageBlock("Перевод прошёл успешно!", "ok");
        transferLoader = false;

        await _js.InvokeVoidAsync("ScrollHelper.ScrollToTop");

        _sendMoneyModule.SetFielAllStatus(ValidationStatus.None);
        StateHasChanged();
    }

    /*private async Task StartTransfer()
    {
        if (transferLoader)
        {
            TransferMoneyError = new ValidationMessageBlock("Дождитесь окончания загрузки предидущего действия...", "error");
            await _js.InvokeVoidAsync("ScrollHelper.ScrollToTop");
            StateHasChanged();
            return;
        }


        transferLoader = true;
        StateHasChanged();

        if (sendMoneyModel.Money <= 99 || SpendMoney > user.Balance)
        {
            addedClassTransfer = "is-invalid";
            TransferMoneyError = new ValidationMessageBlock("Недостаточно средств или введено неверное количество.", "error");
            transferLoader = false;
            await _js.InvokeVoidAsync("ScrollHelper.ScrollToTop");
            StateHasChanged();
            return;
        }

        var userFind = await _userServices.FindUserByNickname(sendMoneyModel.UserName);
        var userList = await _userServices.GetAllFilterClient(false, false);

        if (userFind == null || userFind.Id == user.Id || userList.Where(m => m.Id == userFind.Id).Count() <= 0)
        {
            _autoCompleteBlock.SetAutoCompleteStatus("is-invalid");
            TransferMoneyError = new ValidationMessageBlock("Пользователь для перевода не найден или пользователь не валиден.", "error");
            transferLoader = false;
            await _js.InvokeVoidAsync("ScrollHelper.ScrollToTop");
            StateHasChanged();
            return;
        }

        await _economicServices.CompleteTransferPay(user, userFind, SpendMoney, TransMoney);

        TransferMoneyError = new ValidationMessageBlock("Перевод прошёл успешно!", "ok");
        transferLoader = false;

        await _js.InvokeVoidAsync("ScrollHelper.ScrollToTop");

        _autoCompleteBlock.SetAutoCompleteStatus("");
        addedClassTransfer = "";
        StateHasChanged();
    }
    */

    protected override async Task OnInitializedAsync()
    {
        user = await _userServices.FindUserById(UserId);
        viewer = await _userServices.GetClient();
        var role = await _roleServices.GetRoleAsync(user.RoleId);

        if (user != null)
        {
            if (viewer == null || viewer.Id != user.Id)
            {
                await _virtualNavigationServices.ReRedirectClient(VirtualNavigationServices.errorUrl + "404", hardLoad: true);
                return;
            }

            var ActionId = _navigationManager.Uri.Split('#')[1];

            var item = ActionList.Where(m => m == ActionId).FirstOrDefault();

            if (item == null)
            {
                CurrentAction = ActionList.First();
                await ActionHub(CurrentAction);
            }
            else await ActionHub(ActionId);

            if (role.isBlockedEconomic)
                isEconomicBlocked = true;


            await ChangePageLoadStatus(true);
            StateHasChanged();

            await _js.InvokeVoidAsync("MaxHeightLoader");

            await _js.InvokeVoidAsync("loadScript", "libs/tippy.js/tippy.min.js");

            await _js.InvokeVoidAsync("CreateTippyElement",
        new List<TooltipModel>() {
                new TooltipModel(".-tp-transfer-money", "Перевод денег другому пользователю.", ToolTipStyles.DefaultStyle, width: 350),
                new TooltipModel(".-tp-request-money", "Подать заявку на пополнение баланса.", ToolTipStyles.DefaultStyle, width: 350)
                                                                                });
        }
        else await _virtualNavigationServices.ReRedirectClient(VirtualNavigationServices.accessDeniedUrl, hardLoad: true);
    }

    private async Task ActionHub(string action)
    {
        CurrentAction = ActionList.Last();
        StateHasChanged();

        // страничка сменилась на загрузку

        switch (action)
        {
            case "transferMoney":

                // Перевод денег

                var tax = await _systemConfiguration.Get("economic_transfer.tax");

                TransferMoneyInformation = new ValidationMessageBlock("Вы находитесь на странице перевода денег. В окне ниже начните вводить никнейм пользователя. Вам выдаст варианты пользователей. Нажмите на один из них. Перевод осуществляется по логину пользователя. Логин у каждого пользователя разный и используется при входе. Вам не обязательно искать пользователя, вы можете ввести его логин сразу, если вы его знаете. Информация по переводам:" +
    "<ul>" +
    "<li>Налоговая ставка за перевод: <bold>" + tax + "%</bold></li>" +
    "<li>Минимальная сумма для перевода: <bold>100</bold></li>" +
    "</ul>", "info");

                _sendMoneyModule = new ContextValidationModule<SendMoneyUserToUser>(new SendMoneyUserToUser());
                _sendMoneyModule._model.Tax = Convert.ToDouble(await _systemConfiguration.Get("economic_transfer.tax"));

                break;

            case "requestMoney":

                RequestMoneyInformation = new ValidationMessageBlock("Вы можете пополнить счёт вашего аккаунта. Если вы активно создаете контент в какой либо из стран или группе, за свое творчество и актив вы можете получить воознаграждение:" +
    "<ul>" +
    "<li>Страна\\группа\\организация в который вы создаете контент обязана входить в состав ММ как такогого.</li>" +
    "</ul>", "info");

                _requestMoneyModule = new ContextValidationModule<RequestMoneyModel>(new RequestMoneyModel());
                _requestMoneyModule._model.FillTicketImage = new List<FillTicketImage>()
                {
                    new FillTicketImage() { isUploadBlock = true }, new FillTicketImage(), new FillTicketImage(),
                    new FillTicketImage(), new FillTicketImage(), new FillTicketImage()
                };

                break;
        }

        CurrentAction = action; // Означает окончание загрузки
        await _js.InvokeVoidAsync("UrlHelper.SetHash", "/profile/" + UserId + "/actions", action); // set new hash
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager _navigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITicketServices _ticketServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ISystemConfigurationServices _systemConfiguration { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IEconomicsServices _economicServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IRawTextHtmlizer _rawHtmlizer { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ITransactionServices _transactionServices { get; set; }
    }
}
#pragma warning restore 1591
