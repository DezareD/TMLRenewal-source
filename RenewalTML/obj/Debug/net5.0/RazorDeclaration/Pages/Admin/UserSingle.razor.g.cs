// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace RenewalTML.Pages.Admin
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
#nullable restore
#line 1 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Designing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Navigation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Transactions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Clients;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Admin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Exstention.ClassAddons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Exstention;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Pages.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Blazorise;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data.JSInteropHelper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Blazorise.Utilities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Linq.Expressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\Pages\Admin\UserSingle.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/apanel/userSingle/{userId:int}")]
    public partial class UserSingle : RenewalTMLComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 293 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\Pages\Admin\UserSingle.razor"
       
    [Parameter]
    public int UserId { get; set; }

    private bool isHavePermissionAdministrateUser { get; set; }
    private bool isHavePermissionModerateUser { get; set; }

    private Client Administrator { get; set; }
    private Client User { get; set; }

    private List<AdminAction> adminActions { get; set; }
    private ValidationMessageBlock SettingsInformationBlock { get; set; }

    /* images */

    private Modal modalRefEditImage { get; set; }

    private string mainUserAvatarImage { get; set; }

    private bool isImageUploaded { get; set; }
    private IFileEntry imageUploaded { get; set; }

    private int progressBarImageLoader { get; set; }
    private bool isProgressBarImageLoader { get; set; }
    private bool isEditImagePasswordLoading { get; set; }

    private ValidationMessageBlock EditImageValidationBlock { get; set; }
    private ClientAvatar ClientAvatarRef { get; set; }

    /* screen name */

    private Modal modalRefEditScreenName { get; set; }

    private EditAdminScreenName editScreenNameModel { get; set; }
    private EditContext _edcEditScreenName { get; set; }
    private Validations editScreenNameValidation { get; set; }
    private bool isEditScreenNameLoading { get; set; }
    private ValidationMessageBlock EditScreenNameValidationBlock { get; set; }

    /* login */

    private Modal modalRefEditLogin { get; set; }

    private EditAdminLogin editLoginModel { get; set; }
    private EditContext _edcEditLogin { get; set; }
    private Validations editLoginValidation { get; set; }
    private bool isEditLoginLoading { get; set; }
    private ValidationMessageBlock EditLoginValidationBlock { get; set; }

    /* password */

    private Modal modalRefEditPassword { get; set; }

    private EditAdminPassword editPasswordModel { get; set; }
    private EditContext _edcEditPassword { get; set; }
    private Validations editPasswordValidation { get; set; }
    private bool isEditPasswordLoading { get; set; }
    private ValidationMessageBlock EditPasswordValidationBlock { get; set; }

    /* banned */

    private bool isStartToggleBanned { get; set; }

    private AdminActionBlock adminActionBlockRef { get; set; }

    void OnProgressed(FileProgressedEventArgs e)
    {
        int percent = (Convert.ToInt32(e.Percentage - 10) < 0) ? 0 : Convert.ToInt32(e.Percentage - 10);
        progressBarImageLoader = percent;
        //StateHasChanged();
    }

    private async Task EditImageExecuted()
    {
        isEditImagePasswordLoading = true;
        isProgressBarImageLoader = false;
        progressBarImageLoader = 0;

        StateHasChanged();

        var fileStatic = new VirtualFileStatic(_webhostManager, _fileManager);

        var jsonStringify = await _js.InvokeAsync<string>("CropperConnector.GetDataCropper", ".-js-get-cropped"); // получаем данные с кропера
        var editFileAvatar = JsonConvert.DeserializeObject<CroppedImageInfo>(jsonStringify); // преобразуем данные в класс.

        if (isImageUploaded)
        {
            var megafile = await fileStatic.GenerateWebpFile(imageUploaded, Convert.ToDouble(imageUploaded.Size) / (1024.0 * 1024.0));
            await fileStatic.RecroppedImage(User.UserAvatar_cropp, megafile.MainImageId, editFileAvatar);

            User.UserAvatar_main = megafile.MainImageId;
            await _userServices.UpdateUser(User);
        }
        else
        {
            await fileStatic.RecroppedImage(User.UserAvatar_cropp, User.UserAvatar_main, editFileAvatar);
        }

        await _adminActionServices.CreateAdminTransaction(new AdminAction()
        {
            AdminId = Administrator.Id,
            Date = DateTimeAddon.NowDateTimeStrings(),
            HtmlText = "Администратор обнавил аватар.",
            Icon = "fa-user-circle",
            Priority = 1,
            Type = "{to:user:" + User.Id + "}"
        });

        isEditImagePasswordLoading = false;

        await RestrictedPage();

        HideEditImageModel();

        await ClientAvatarRef.ReGenerateImage();

        SettingsInformationBlock = new ValidationMessageBlock("Аватар успешно изменён.", "ok");
        //userImageSettings = (await _fileManager.GetPhysicCroppedFile(user.UserAvatar_cropp)) + "?_v=" + ClientAuthServices.GenerateRandomString(10, false).ToUpperInvariant();
    }

    private async Task ToggleBanned()
    {
        if (isStartToggleBanned == true)
            return;

        isStartToggleBanned = true;
        StateHasChanged();

        try
        {
            if (isHavePermissionAdministrateUser)
            {
                await _adminUserServices.ToggleUserBanned(User);

                await _adminActionServices.CreateAdminTransaction(new AdminAction()
                {
                    AdminId = Administrator.Id,
                    Date = DateTimeAddon.NowDateTimeStrings(),
                    HtmlText = "Пользователь заблокирован \\ разблокирован.",
                    Icon = "fa-user-alt-slash",
                    Priority = 2,
                    Type = "{to:user:" + User.Id + "}"
                });

                await RestrictedPage();

                SettingsInformationBlock = new ValidationMessageBlock("Пользователь успешно заблокирован \\ разблокирован!", "ok");
            }
        }
        catch (Exception)
        {
            SettingsInformationBlock = new ValidationMessageBlock("Ошибка блокировки\\разблокировки пользователя.", "error");
        }

        isStartToggleBanned = false;
    }

    private async Task OnChangedFile(FileChangedEventArgs e)
    {
        var file = e.Files.FirstOrDefault();

        if (file == null)
        {
            EditImageValidationBlock = new ValidationMessageBlock("Что-то пошло не так при загрузке файлов.", "error");
            return;
        }
        if (!VirtualFileManager.imageMimeTypes.Contains(file.Type))
        {
            EditImageValidationBlock = new ValidationMessageBlock("Загружаемый файл не является изоображением.", "error");
            return;
        }

        if ((file.Size / (1024 * 1024)) > 2) // 2 mb limit
        {
            EditImageValidationBlock = new ValidationMessageBlock("Загружаемый файл слишком большой.", "error");
            return;
        }

        isProgressBarImageLoader = true;
        progressBarImageLoader = 0;
        StateHasChanged();

        imageUploaded = file;
        isImageUploaded = true;

        var fileStatic = new VirtualFileStatic(_webhostManager, _fileManager);


        // TODO: DAY TO DELETE THIS IMAGE: 1
        var megafile = await fileStatic.GenerateWebpFile(imageUploaded, Convert.ToDouble(imageUploaded.Size) / (1024.0 * 1024.0),
            hourseToDelete: 1); // delete 1 hourse later
        mainUserAvatarImage = await _fileManager.GetPhysicFileUrl(megafile.MainImageId);

        progressBarImageLoader = 100;

        StateHasChanged();

        await _js.InvokeVoidAsync("CropperConnector.InjectCropperToImage", ".-js-get-cropped"); // reinject
    }

    private void HideEditImageModel()
    {
        imageUploaded = null;
        isImageUploaded = false;
        mainUserAvatarImage = null;
        isProgressBarImageLoader = false;
        progressBarImageLoader = 0;

        EditImageValidationBlock = null;

        modalRefEditImage.Hide();
    }

    private async Task ShowEditImageModel()
    {
        if (isHavePermissionModerateUser)
        {
            var croppedFile = await _fileManager.GetCroppedImageFile(User.UserAvatar_cropp);
            mainUserAvatarImage = await _fileManager.GetPhysicFileUrl(User.UserAvatar_main);
            StateHasChanged();
            await _js.InvokeVoidAsync("CropperConnector.InjectCropperToImage", ".-js-get-cropped", croppedFile.x, croppedFile.y, croppedFile.width, croppedFile.height);
            isProgressBarImageLoader = true;

            modalRefEditImage.Show();
        }
    }

    /* screen name */

    private void HideEditScreenNameModel()
    {
        editScreenNameModel = new EditAdminScreenName() { };
        EditScreenNameValidationBlock = null;
        modalRefEditScreenName.Hide();
    }

    private async Task EditScreenNameModelExecuted()
    {
        if (isEditScreenNameLoading == true)
            return;

        isEditScreenNameLoading = true;
        StateHasChanged();

        if (editScreenNameValidation.ValidateAll())
        {
            try
            {
                await _adminUserServices.SetUserScreenName(User, editScreenNameModel.NewScreenName);

                SettingsInformationBlock = new ValidationMessageBlock("Никнейм успешно изменён.", "ok");

                await _adminActionServices.CreateAdminTransaction(new AdminAction()
                {
                    AdminId = Administrator.Id,
                    Date = DateTimeAddon.NowDateTimeStrings(),
                    HtmlText = "Администратор изменил никнейм на: " + editScreenNameModel.NewScreenName + ".",
                    Icon = "fa-user-tag",
                    Priority = 1,
                    Type = "{to:user:" + User.Id + "}"
                });

                await RestrictedPage();

                HideEditScreenNameModel();
            }
            catch (Exception)
            {
                EditScreenNameValidationBlock = new ValidationMessageBlock("Ошибка смены никнейма.", "error");
            }
        }

        isEditScreenNameLoading = false;
    }

    private void ShowEditScreenNameModel()
    {
        if (isHavePermissionModerateUser)
        {
            editScreenNameModel = new EditAdminScreenName() { };
            editScreenNameModel.NewScreenName = User.ScreenName;
            modalRefEditScreenName.Show();
        }
    }

    /* login */

    private void HideEditLoginModel()
    {
        editLoginModel = new EditAdminLogin() { };
        EditLoginValidationBlock = null;
        modalRefEditLogin.Hide();
    }

    private async Task EditLoginModelExecuted()
    {
        if (isEditLoginLoading == true)
            return;

        isEditLoginLoading = true;
        StateHasChanged();

        if (editLoginValidation.ValidateAll())
        {
            try
            {
                var user = await _userServices.FindUserByNickname(editLoginModel.NewLogin);

                if (user == null)
                {
                    await _adminUserServices.SetUserLogin(User, editLoginModel.NewLogin);

                    SettingsInformationBlock = new ValidationMessageBlock("Логин успешно изменён.", "ok");

                    await _adminActionServices.CreateAdminTransaction(new AdminAction()
                    {
                        AdminId = Administrator.Id,
                        Date = DateTimeAddon.NowDateTimeStrings(),
                        HtmlText = "Администратор изменил логин на: " + editLoginModel.NewLogin + ".",
                        Icon = "fa-user-tag",
                        Priority = 2,
                        Type = "{to:user:" + User.Id + "}"
                    });

                    await RestrictedPage();

                    HideEditLoginModel();
                }
                else EditLoginValidationBlock = new ValidationMessageBlock("Ошибка смены логина. Такой аккаунт уже существует.", "error");
            }
            catch (Exception)
            {
                EditLoginValidationBlock = new ValidationMessageBlock("Ошибка смены логина.", "error");
            }
        }

        isEditLoginLoading = false;
    }

    private void ShowEditLoginModel()
    {
        if (isHavePermissionAdministrateUser)
        {
            editLoginModel = new EditAdminLogin() { };
            editLoginModel.NewLogin = User.UserName;
            modalRefEditLogin.Show();
        }
    }

    /* password */

    private void HideEditPasswordModel()
    {
        editPasswordModel = new EditAdminPassword() { };
        EditPasswordValidationBlock = null;
        modalRefEditPassword.Hide();
    }

    private async Task EditPasswordModelExecuted()
    {
        if (isEditPasswordLoading == true)
            return;

        isEditPasswordLoading = true;
        StateHasChanged();

        if (editPasswordValidation.ValidateAll())
        {
            try
            {
                await _adminUserServices.SetUserPassword(User, editPasswordModel.NewPassword);

                SettingsInformationBlock = new ValidationMessageBlock("Пароль успешно изменён.", "ok");

                await _adminActionServices.CreateAdminTransaction(new AdminAction()
                {
                    AdminId = Administrator.Id,
                    Date = DateTimeAddon.NowDateTimeStrings(),
                    HtmlText = "Администратор изменил пароль для пользователя.",
                    Icon = "fa-key",
                    Priority = 2,
                    Type = "{to:user:" + User.Id + "}"
                });

                await RestrictedPage();

                HideEditPasswordModel();
            }
            catch (Exception)
            {
                EditPasswordValidationBlock = new ValidationMessageBlock("Ошибка смены пароля.", "error");
            }
        }

        isEditPasswordLoading = false;
    }

    private void ShowEditPasswordModel()
    {
        if (isHavePermissionAdministrateUser)
        {
            editPasswordModel = new EditAdminPassword() { };

            modalRefEditPassword.Show();
        }
    }

    private bool isBanned { get; set; }
    private int allCountActions { get; set; }

    private async Task RestrictedPage()
    {
        User = await _userServices.FindUserById(UserId);

        var userRole = await _roleServices.GetRoleAsync(User.RoleId);

        if (userRole.RequereName == RoleManager.defaultRoleName_banned)
            isBanned = true;
        else isBanned = false;

        adminActions = await _adminActionServices.GetAdminActionForUser(User);
        allCountActions = await _adminActionServices.GetAdminActionForUserCount(User);

        StateHasChanged();
        await adminActionBlockRef.SHC();
    }

    protected override async Task OnInitializedAsync()
    {
        Administrator = await _userServices.GetClient();
        var role = await _roleServices.GetRoleAsync(Administrator.RoleId);
        User = await _userServices.FindUserById(UserId);

        var userRole = await _roleServices.GetRoleAsync(User.RoleId);

        if (Administrator == null || User == null || Administrator.Id == User.Id)
        {
            if (Administrator.Id == User.Id)
                await _virtualNavigationServices.ReRedirectClient(VirtualNavigationServices.accessDeniedUrl, hardLoad: true);
            else await _virtualNavigationServices.ReRedirectClient(VirtualNavigationServices.errorUrl + "404", hardLoad: true);
            return;
        }

        if (role.isHaveAccesToAdminPanel && role.isHaveToViewUserList && (role.isHaveToModerateUserAccount || role.isHaveToAdministrateUserAccount))
        {
            if (role.isHaveToAdministrateUserAccount)
                isHavePermissionAdministrateUser = true;

            if (role.isHaveToModerateUserAccount)
                isHavePermissionModerateUser = true;

            if (userRole.RequereName == RoleManager.defaultRoleName_banned)
                isBanned = true;

            await _js.InvokeVoidAsync("loadScript", "libs/cropper.js/cropper.min.js");
            await _js.InvokeVoidAsync("loadScript", "libs/cropper.js/jquery-cropper.min.js");

            adminActions = await _adminActionServices.GetAdminActionForUser(User);
            allCountActions = await _adminActionServices.GetAdminActionForUserCount(User);

            editScreenNameModel = new EditAdminScreenName();
            _edcEditScreenName = new EditContext(editScreenNameModel);

            editLoginModel = new EditAdminLogin();
            _edcEditLogin = new EditContext(editLoginModel);

            editPasswordModel = new EditAdminPassword();
            _edcEditPassword = new EditContext(editPasswordModel);

            await ChangePageLoadStatus(true);
        }
        else await _virtualNavigationServices.ReRedirectClient(VirtualNavigationServices.accessDeniedUrl, hardLoad: true);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment _webhostManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IVirtualFileServices _fileManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IUserAdminServices _adminUserServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAdminActionServices _adminActionServices { get; set; }
    }
}
#pragma warning restore 1591
