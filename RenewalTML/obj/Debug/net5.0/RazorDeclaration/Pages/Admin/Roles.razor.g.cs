// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace RenewalTML.Pages.Admin
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
#nullable restore
#line 1 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Designing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Navigation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Transactions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Clients;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Admin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Exstention.ClassAddons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Exstention;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Pages.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Blazorise;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data.JSInteropHelper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Blazorise.Utilities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Linq.Expressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/apanel/roles")]
    public partial class Roles : RenewalTMLComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 332 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\Pages\Admin\Roles.razor"
       
    private Modal modalRef { get; set; }
    private List<RoleEnchantedModel> RoleList { get; set; }

    private Modal modalRefAddRole { get; set; }
    private Modal modalRefDeleteRole { get; set; }

    /* Create role */
    private RoleModel addRoleModel { get; set; }
    private EditContext _edcAddrole { get; set; }
    private Validations addRoleValidation { get; set; }
    private bool isAddLoading { get; set; }
    private ValidationMessageBlock AddRoleValidationBlock { get; set; }

    /* Edit Role */
    private RoleModel editRoleModel { get; set; }
    private EditContext _edcEditrole { get; set; }
    private Validations editRoleValidation { get; set; }
    private bool isEditLoading { get; set; }
    private ValidationMessageBlock EditRoleValidationBlock { get; set; }

    /* Delete Role */
    private bool isDeleterLoading { get; set; }
    private RoleEnchantedModel deleteRole { get; set; }
    private ValidationMessageBlock DeleteRoleValidationBlock { get; set; }

    private Client adminView { get; set; }

    protected override async Task OnInitializedAsync()
    {
        adminView = await _userServices.GetClient();
        var role = await _roleServices.GetRoleAsync(adminView.RoleId);

        // todo isHaveToViewUserList
        if (role.isHaveAccesToAdminPanel && role.isHaveAccesToEditRoles)
        {
            RoleList = await _roleServices.GetAllEnchantedRoles();

            editRoleModel = new RoleModel();
            _edcEditrole = new EditContext(editRoleModel);

            addRoleModel = new RoleModel();
            _edcAddrole = new EditContext(addRoleModel);

            deleteRole = new RoleEnchantedModel();

            await ChangePageLoadStatus(true);
        }
        else await _virtualNavigationServices.ReRedirectClient(VirtualNavigationServices.accessDeniedUrl, hardLoad: true);
    }

    /* EDIT ROLE */

    private async Task EditModelExecuted()
    {
        isEditLoading = true;
        if (editRoleValidation.ValidateAll())
        {
            try
            {
                var role = await _roleServices.GetRoleAsync(editRoleModel.Id);

                role.RoleName = editRoleModel.Name;
                role.RoleStyle = editRoleModel.Class;
                role.isHaveAccessToSite = editRoleModel.isHaveAccessToSite;
                role.isHaveAccesToAdminPanel = editRoleModel.isHaveAccesToAdminPanel;
                role.isHaveAccesToEditRoles = editRoleModel.isHaveAccesToEditRoles;
                role.isHaveToModerateTransactions = editRoleModel.isHaveToModerateTransaction;

                role.isHaveToViewUserList = editRoleModel.isHaveToViewUserList;
                role.isHaveToModerateUserAccount = editRoleModel.isHaveToViewUserList;
                role.isHaveToAdministrateUserAccount = editRoleModel.isHaveToAdministrateUserAccount;
                role.isHaveAccesToPremiumEditor = editRoleModel.isHaveAccesToPremiumEditor;
                role.isHaveAccesToUltimateEditor = editRoleModel.isHaveAccesToUltimateEditor;
                role.isBlockedEconomic = editRoleModel.isBlockedEconomic;

                role.isHaveAccesToViewSystemSettings = editRoleModel.isHaveAccesToViewSystemSettings;
                role.isHaveAccesToEditSettings_System = editRoleModel.isHaveAccesToEditSettings_System;
                role.isHaveAccesToEditSettings_Economic = editRoleModel.isHaveAccesToEditSettings_Economic;

                role.isHaveAccesToOfflineSite = editRoleModel.isHaveAccesToOfflineSite;

                if ((role.isHaveToViewUserList || role.isHaveAccesToEditRoles
                    || role.isHaveToModerateUserAccount || role.isHaveToAdministrateUserAccount
                    || role.isHaveAccesToViewSystemSettings || role.isHaveAccesToEditSettings_System
                    || role.isHaveAccesToEditSettings_Economic) && !role.isHaveAccesToAdminPanel)
                {
                    EditRoleValidationBlock = new ValidationMessageBlock("Вы дали админ-привилегии, но не дали доступ в админ-панель.", "error");
                    isEditLoading = false;
                    return;
                }

                if(!role.isHaveAccesToViewSystemSettings && (role.isHaveAccesToEditSettings_Economic || role.isHaveAccesToEditSettings_System))
                {
                    EditRoleValidationBlock = new ValidationMessageBlock("Вы дали возможность просмотра настроек, но ни одна из категорий не выбрана.", "error");
                    isEditLoading = false;
                    return;
                }

                await _roleServices.UpdateRole(role);

                await _adminActionServices.CreateAdminTransaction(new AdminAction()
                {
                    AdminId = adminView.Id,
                    Date = DateTimeAddon.NowDateTimeStrings(),
                    HtmlText = "Администратор произвел изменения над ролью: '" + role.RoleName + "'.",
                    Icon = "fa users",
                    Priority = 2,
                    Type = "{to:system}"
                });

                RoleList = await _roleServices.GetAllEnchantedRoles();

                HideRoleEditModal();
            }
            catch (Exception)
            {
                EditRoleValidationBlock = new ValidationMessageBlock("Ошибка обновления роли.", "error");
            }
        }
        isEditLoading = false;
    }

    private async Task ShowRoleEditModal(int id)
    {
        var role = await _roleServices.GetRoleAsync(id);

        editRoleModel = new RoleModel()
        {
            Id = role.Id,
            isHaveAccessToSite = role.isHaveAccessToSite,
            isHaveAccesToAdminPanel = role.isHaveAccesToAdminPanel,
            isHaveAccesToEditRoles = role.isHaveAccesToEditRoles,
            isHaveToModerateTransaction = role.isHaveToModerateTransactions,
            isHaveAccesToPremiumEditor = role.isHaveAccesToPremiumEditor,
            isHaveAccesToUltimateEditor = role.isHaveAccesToUltimateEditor,
            isHaveToAdministrateUserAccount = role.isHaveToAdministrateUserAccount,
            isHaveToModerateUserAccount = role.isHaveToModerateUserAccount,
            isHaveToViewUserList = role.isHaveToViewUserList,
            isBlockedEconomic = role.isBlockedEconomic,
            isHaveAccesToEditSettings_Economic = role.isHaveAccesToEditSettings_Economic,
            isHaveAccesToEditSettings_System = role.isHaveAccesToEditSettings_System,
            isHaveAccesToViewSystemSettings = role.isHaveAccesToViewSystemSettings,
            Name = role.RoleName,
            isHaveAccesToOfflineSite = role.isHaveAccesToOfflineSite,
            Class = role.RoleStyle
        };

        modalRef.Show();
    }

    private void HideRoleEditModal()
    {
        editRoleModel = new RoleModel();
        EditRoleValidationBlock = null;
        modalRef.Hide();
    }

    /* ADD ROLE */

    private async Task AddModelExecuted()
    {
        isAddLoading = true;

        if (addRoleValidation.ValidateAll())
        {
            try
            {
                if ((addRoleModel.isHaveToViewUserList || addRoleModel.isHaveAccesToEditRoles
                    || addRoleModel.isHaveToModerateUserAccount || addRoleModel.isHaveToAdministrateUserAccount
                    || addRoleModel.isHaveAccesToViewSystemSettings || addRoleModel.isHaveAccesToEditSettings_System
                    || addRoleModel.isHaveAccesToEditSettings_Economic) && !addRoleModel.isHaveAccesToAdminPanel)
                {
                    AddRoleValidationBlock = new ValidationMessageBlock("Вы дали админ-привилегии, но не дали доступ в админ-панель.", "error");
                    isAddLoading = false;
                    return;
                }


                if (!addRoleModel.isHaveAccesToViewSystemSettings && (addRoleModel.isHaveAccesToEditSettings_Economic || addRoleModel.isHaveAccesToEditSettings_System))
                {
                    AddRoleValidationBlock = new ValidationMessageBlock("Вы дали возможность просмотра настроек, но ни одна из категорий не выбрана.", "error");
                    isEditLoading = false;
                    return;
                }

                var role = new Role()
                {
                    RequereName = "",
                    isHaveAccessToSite = addRoleModel.isHaveAccessToSite,
                    isHaveAccesToAdminPanel = addRoleModel.isHaveAccesToAdminPanel,
                    isHaveAccesToEditRoles = addRoleModel.isHaveAccesToEditRoles,
                    isHaveToModerateTransactions = addRoleModel.isHaveToModerateTransaction,
                    isHaveAccesToPremiumEditor = addRoleModel.isHaveAccesToPremiumEditor,
                    isHaveAccesToUltimateEditor = addRoleModel.isHaveAccesToUltimateEditor,
                    isHaveToAdministrateUserAccount = addRoleModel.isHaveToAdministrateUserAccount,
                    isHaveToModerateUserAccount = addRoleModel.isHaveToModerateUserAccount,
                    isHaveToViewUserList = addRoleModel.isHaveToViewUserList,
                    isBlockedEconomic = addRoleModel.isBlockedEconomic,
                    isHaveAccesToEditSettings_Economic = addRoleModel.isHaveAccesToEditSettings_Economic,
                    isHaveAccesToEditSettings_System = addRoleModel.isHaveAccesToEditSettings_System,
                    isHaveAccesToViewSystemSettings = addRoleModel.isHaveAccesToViewSystemSettings,
                    isHaveAccesToOfflineSite = addRoleModel.isHaveAccesToOfflineSite,
                    RoleName = addRoleModel.Name,
                    RoleStyle = addRoleModel.Class
                };

                await _roleServices.CreateRole(role);

                await _adminActionServices.CreateAdminTransaction(new AdminAction()
                {
                    AdminId = adminView.Id,
                    Date = DateTimeAddon.NowDateTimeStrings(),
                    HtmlText = "Администратор создал роль: '" + role.RoleName + "'.",
                    Icon = "fa users",
                    Priority = 2,
                    Type = "{to:system}"
                });

                RoleList = await _roleServices.GetAllEnchantedRoles();

                HideRoleAddModal();
            }
            catch (Exception)
            {
                DeleteRoleValidationBlock = new ValidationMessageBlock("Ошибка удаления роли.", "error");
            }
        }

        isAddLoading = false;
    }

    private void ShowRoleAddModal()
    {
        addRoleModel = new RoleModel() { };

        modalRefAddRole.Show();
    }

    private void HideRoleAddModal()
    {
        addRoleModel = new RoleModel();
        AddRoleValidationBlock = null;
        modalRefAddRole.Hide();
    }

    /* DELETE ROLE */

    private async Task DeleteModelExecuted()
    {
        isDeleterLoading = true;

        try
        { 
            await _adminActionServices.CreateAdminTransaction(new AdminAction()
            {
                AdminId = adminView.Id,
                Date = DateTimeAddon.NowDateTimeStrings(),
                HtmlText = "Администратор удалил роль: '" + deleteRole.role.RoleName + "'.",
                Icon = "fa users",
                Priority = 2,
                Type = "{to:system}"
            });

            await _roleServices.RebaseBeforeDelete(deleteRole.role.Id);
            await _roleServices.DeleteRole(deleteRole.role);

            RoleList = await _roleServices.GetAllEnchantedRoles();

            HideRoleDeleteModal();
        }
        catch (Exception)
        {
            AddRoleValidationBlock = new ValidationMessageBlock("Ошибка создания роли.", "error");
        }

        isDeleterLoading = false;
    }

    private async Task ShowRoleDeleteModal(int id)
    {
        deleteRole = new RoleEnchantedModel();

        deleteRole.role = await _roleServices.GetRoleAsync(id);
        deleteRole.UserCount = await _userServices.GetCountClientByRoleId(deleteRole.role.Id);

        modalRefDeleteRole.Show();
    }

    private void HideRoleDeleteModal()
    {
        deleteRole = new RoleEnchantedModel();
        DeleteRoleValidationBlock = null;

        modalRefDeleteRole.Hide();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IAdminActionServices _adminActionServices { get; set; }
    }
}
#pragma warning restore 1591
