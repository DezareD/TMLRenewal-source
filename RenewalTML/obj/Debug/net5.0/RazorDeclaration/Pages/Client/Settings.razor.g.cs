// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace RenewalTML.Pages.Client
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
#nullable restore
#line 1 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Designing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Navigation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Notifications;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Transactions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Validation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Clients;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Admin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 19 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Exstention.ClassAddons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 20 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Shared.Exstention;

#line default
#line hidden
#nullable disable
#nullable restore
#line 21 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 22 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data.Model;

#line default
#line hidden
#nullable disable
#nullable restore
#line 23 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Pages.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 24 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Blazorise;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data.Dto;

#line default
#line hidden
#nullable disable
#nullable restore
#line 26 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using RenewalTML.Data.JSInteropHelper;

#line default
#line hidden
#nullable disable
#nullable restore
#line 27 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Newtonsoft.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 28 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 29 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Blazorise.Utilities;

#line default
#line hidden
#nullable disable
#nullable restore
#line 30 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using Microsoft.AspNetCore.Components;

#line default
#line hidden
#nullable disable
#nullable restore
#line 31 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Threading.Tasks;

#line default
#line hidden
#nullable disable
#nullable restore
#line 32 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.ComponentModel.DataAnnotations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 33 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Linq.Expressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 34 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\_Imports.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\Pages\Client\Settings.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 185 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\Pages\Client\Settings.razor"
using System.Text.RegularExpressions;

#line default
#line hidden
#nullable disable
#nullable restore
#line 186 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\Pages\Client\Settings.razor"
using System.Threading;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/profile/{userId:int}/settings")]
    public partial class Settings : RenewalTMLComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 188 "C:\Users\Fearp\source\repos\RenewalTML\RenewalTML\Pages\Client\Settings.razor"
       
    [CascadingParameter(Name = "mainbar_updateImage")]
    public EventCallback mainbar_updateImage { get; set; }

    [Parameter]
    public int UserId { get; set; }

    [CascadingParameter(Name = "navbar_update")]
    public EventCallback navbar_update { get; set; }

    private Client user { get; set; }
    private Client viewer { get; set; }

    private InputLoaderState screenNameState { get; set; }
    private bool screenNameStartValiation { get; set; }
    private string screenNameText { get; set; }
    private string screenNameErrorMessage { get; set; }

    private Modal modalRefEditPassword { get; set; }

    private Modal modalRefEditImage { get; set; }
    private ClientAvatar ClientAvatarRef { get; set; }

    /* Change password */
    private EditPasswordModel editPasswordModel { get; set; }
    private EditContext _edcEditPassword { get; set; }
    private Validations editPasswordValidation { get; set; }
    private bool isEditPasswordLoading { get; set; }
    private ValidationMessageBlock EditPasswordValidationBlock { get; set; }


    private ValidationMessageBlock SettingsInformationBlock { get; set; }

    /* IMAGING */

    private bool isEditImagePasswordLoading { get; set; }

    private string mainUserAvatarImage { get; set; }

    private bool isImageUploaded { get; set; }
    private IFileEntry imageUploaded { get; set; }

    private int progressBarImageLoader { get; set; }
    private bool isProgressBarImageLoader { get; set; }

    private ValidationMessageBlock EditImageValidationBlock { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await _userServices.FindUserById(UserId);
        viewer = await _userServices.GetClient();


        if (user == null || viewer == null)
            await _virtualNavigationServices.ReRedirectClient(VirtualNavigationServices.errorUrl + 404, hardLoad: true);

        StateHasChanged();

        if (user.Id == viewer.Id)
        {
            screenNameText = user.ScreenName;
            editPasswordModel = new EditPasswordModel();
            _edcEditPassword = new EditContext(editPasswordModel);

            await _js.InvokeVoidAsync("loadScript", "libs/cropper.js/cropper.min.js");
            await _js.InvokeVoidAsync("loadScript", "libs/cropper.js/jquery-cropper.min.js");
            await _js.InvokeVoidAsync("loadScript", "libs/tippy.js/tippy.min.js");

            await _js.InvokeVoidAsync("CreateTippyElement",
            new List<TooltipModel>() {
                new TooltipModel(".-tp-autosave-info", "Данное поле автосохраняемое, просто вводите текст, а этот индикатор покажет статус изменения.", ToolTipStyles.DefaultStyle, width: 350)
                    });

            await ChangePageLoadStatus(true);

            StateHasChanged();

            await _js.InvokeVoidAsync("MaxHeightLoader");
        }
        else await _virtualNavigationServices.ReRedirectClient(VirtualNavigationServices.accessDeniedUrl, hardLoad: true);
    }

    /* VALIDATORS */

    async Task ValidateScreeNameAsync(ValidatorEventArgs e, CancellationToken cancellationToken)
    {
        screenNameText = Convert.ToString(e.Value);
        screenNameErrorMessage = null;

        if (screenNameStartValiation)
        {
            screenNameState = InputLoaderState.Loading;
            StateHasChanged();

            var screename = Convert.ToString(e.Value);
            var screenNamePattern = new Regex("^.[^{}:\"]{4,20}$");

            if (!screenNamePattern.IsMatch(screename))
            {
                screenNameState = InputLoaderState.Error;
                screenNameErrorMessage = "Ошибка ввода. Никнйем не сохранился.";
            }
            else
            {
                await _userServices.UpdateUserScreenName(user, screenNameText);
                await navbar_update.InvokeAsync();
                screenNameState = InputLoaderState.Succes;
            }
        }
        else screenNameStartValiation = true;

        StateHasChanged();
    }

    /* EDIT PASSWORD */

    private async Task EditPasswordModelExecuted()
    {
        if (isEditPasswordLoading == true)
            return;

        isEditPasswordLoading = true;
        StateHasChanged();

        if (editPasswordValidation.ValidateAll())
        {
            try
            {
                var isComplete = await _userServices.UserPasswordIsOk(user, editPasswordModel.OldPassword);

                if (!isComplete)
                {
                    EditPasswordValidationBlock = new ValidationMessageBlock("Неверно указан текущий пароль.", "error");
                    isEditPasswordLoading = false;
                    return;
                }

                await _userServices.UpdateUserPassword(user, editPasswordModel.NewPassword);

                SettingsInformationBlock = new ValidationMessageBlock("Пароль успешно изменён.", "ok");

                HideEditPasswordModel();
            }
            catch (Exception)
            {
                EditPasswordValidationBlock = new ValidationMessageBlock("Ошибка смены пароля.", "error");
            }
        }

        isEditPasswordLoading = false;
    }

    private void ShowEditPasswordModel()
    {
        editPasswordModel = new EditPasswordModel() { };

        modalRefEditPassword.Show();
    }

    private void HideEditPasswordModel()
    {
        editPasswordModel = new EditPasswordModel() { };
        EditPasswordValidationBlock = null;
        modalRefEditPassword.Hide();
    }

    /* IMAGING */

    private async Task EditImageExecuted()
    {
        isEditImagePasswordLoading = true;
        isProgressBarImageLoader = false;
        progressBarImageLoader = 0;

        StateHasChanged();

        var fileStatic = new VirtualFileStatic(_webhostManager, _fileManager);

        var jsonStringify = await _js.InvokeAsync<string>("CropperConnector.GetDataCropper", ".-js-get-cropped"); // получаем данные с кропера
        var editFileAvatar = JsonConvert.DeserializeObject<CroppedImageInfo>(jsonStringify); // преобразуем данные в класс.

        if (isImageUploaded)
        {
            var megafile = await fileStatic.GenerateWebpFile(imageUploaded, Convert.ToDouble(imageUploaded.Size) / (1024.0 * 1024.0));
            await fileStatic.RecroppedImage(user.UserAvatar_cropp, megafile.MainImageId, editFileAvatar);

            user.UserAvatar_main = megafile.MainImageId;
            await _userServices.UpdateUser(user);
        }
        else
        {
            await fileStatic.RecroppedImage(user.UserAvatar_cropp, user.UserAvatar_main, editFileAvatar);
        }

        isEditImagePasswordLoading = false;
        HideEditImageModel();

        await ClientAvatarRef.ReGenerateImage();
        //userImageSettings = (await _fileManager.GetPhysicCroppedFile(user.UserAvatar_cropp)) + "?_v=" + ClientAuthServices.GenerateRandomString(10, false).ToUpperInvariant();
        await mainbar_updateImage.InvokeAsync();
    }

    private async Task ShowEditImageModel()
    {
        var croppedFile = await _fileManager.GetCroppedImageFile(user.UserAvatar_cropp);
        mainUserAvatarImage = await _fileManager.GetPhysicFileUrl(user.UserAvatar_main);
        StateHasChanged();
        await _js.InvokeVoidAsync("CropperConnector.InjectCropperToImage", ".-js-get-cropped", croppedFile.x, croppedFile.y, croppedFile.width, croppedFile.height);
        isProgressBarImageLoader = true;

        modalRefEditImage.Show();
    }

    private void HideEditImageModel()
    {
        imageUploaded = null;
        isImageUploaded = false;
        mainUserAvatarImage = null;
        isProgressBarImageLoader = false;
        progressBarImageLoader = 0;

        EditImageValidationBlock = null;

        modalRefEditImage.Hide();
    }

    void OnProgressed(FileProgressedEventArgs e)
    {
        int percent = (Convert.ToInt32(e.Percentage - 10) < 0) ? 0 : Convert.ToInt32(e.Percentage - 10);
        progressBarImageLoader = percent;
        //StateHasChanged();
    }

    async Task OnChangedFile(FileChangedEventArgs e)
    {
        var file = e.Files.FirstOrDefault();

        if (file == null)
        {
            EditImageValidationBlock = new ValidationMessageBlock("Что-то пошло не так при загрузке файлов.", "error");
            return;
        }
        if (!VirtualFileManager.imageMimeTypes.Contains(file.Type))
        {
            EditImageValidationBlock = new ValidationMessageBlock("Загружаемый файл не является изоображением.", "error");
            return;
        }

        if ((file.Size / (1024 * 1024)) > 2) // 2 mb limit
        {
            EditImageValidationBlock = new ValidationMessageBlock("Загружаемый файл слишком большой.", "error");
            return;
        }

        isProgressBarImageLoader = true;
        progressBarImageLoader = 0;
        StateHasChanged();

        imageUploaded = file;
        isImageUploaded = true;

        var fileStatic = new VirtualFileStatic(_webhostManager, _fileManager);


        // TODO: DAY TO DELETE THIS IMAGE: 1
        var megafile = await fileStatic.GenerateWebpFile(imageUploaded, Convert.ToDouble(imageUploaded.Size) / (1024.0 * 1024.0),
            hourseToDelete: 1); // delete 1 hourse later
        mainUserAvatarImage = await _fileManager.GetPhysicFileUrl(megafile.MainImageId);

        progressBarImageLoader = 100;

        StateHasChanged();

        await _js.InvokeVoidAsync("CropperConnector.InjectCropperToImage", ".-js-get-cropped"); // reinject
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private INotificationServices _notificationServices { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment _webhostManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IVirtualFileServices _fileManager { get; set; }
    }
}
#pragma warning restore 1591
