@page "/profile/{userId:int}"

@inject ITransactionServices _transactionServices
@inject IVirtualFileServices _fileManager
@inject IRawTextHtmlizer _rawHtmlizer

@inherits RenewalTMLComponentBase

<div style="display:flex; gap:15px;" class="block p-normal">
    <div style="flex: 9;">
        <div class="block p-normal user-header-block">
            @if (_isComplete)
            {
                <div style="width: 100px; position: relative;">
                    <ClientAvatar @key="user.UserName" Client="user" AvatarSize="AvatarSize._100x"></ClientAvatar>
                </div>
                <div class="user-header-text-wrapper">
                    <p style="color: #333;margin-bottom: 5px;font-weight: 700;">@user.UserName</p>
                    <!-- TODO: ADMIN INFORMATION FOR USERS ( ЧТО ТО ВРОДЕ ЗАМЕТОК ДЛЯ САМЫХ КРУТЫХ И ПОПУЛЯРНЫХ ЛЮДЕЙ. -->
                    <p style="font-size: 13px;">Профиль пользователя</p>
                    <!-- TODO: Нормальная система badge -->
                    @if (clientRole.isHaveAccesToAdminPanel)
                    {
                        <div class="admin-badge">A</div>
                    }
                </div>
            }
            else
            {
                <div class="loader-wrapper"><div class="btn-loader page"></div></div>
            }
        </div>
        <div class="block p-normal">
            @if (_isComplete)
            {
                <p class="page-title-user">Профиль</p>
                <div class="userbar-navigation" style="display: flex; ">
                    <div class="user-navigation-information-block active" style="flex: 1;">
                        <p class="top-info-nav">Счёт</p>
                        <p class="main-text-nav">@CurrencyAddon.Format(user.Balance) <MoneyLogotype Class="medium black-grey" /></p>
                    </div>
                    <div class="user-navigation-information-block" style="flex: 1; opacity: 0.4; cursor: not-allowed;">
                        <p class="top-info-nav">Депозит</p>
                        <p class="main-text-nav">-</p>
                    </div>
                    <div class="user-navigation-information-block" style="flex: 1; opacity: 0.4; cursor: not-allowed; ">
                        <p class="top-info-nav">Предметы</p>
                        <p class="main-text-nav">- Шт.</p>
                    </div>
                </div>

                <p class="page-title-user" style="margin-top: 15px; margin-bottom: 15px;">График</p>
                <p class="info-debug-text">Данные для графиков временно не сохраняются, график ниже - рандомно сгенерирован и никак не относится к пользовтелю. Он нужен что-бы показать, что система рендеринга графиков работает.</p>
                <div style="width: 100%; height: 175px; opacity: 0.4; cursor: not-allowed">
                    <canvas id="userBalanceChart" width="300" height="250"></canvas>
                </div>
            }
            else
            {
                <div class="loader-wrapper"><div class="btn-loader page"></div></div>
            }
        </div>
    </div>
    <div style="flex: 5;" class="block p-normal">
        @if (userTransactions != null)
        {
            <p class="page-title-user">Транзакции</p>
            <TransactionModuleBlock Style="margin-top: 15px;" TransactionList="userTransactions" @key="user.UserName" UserTransaction="user"></TransactionModuleBlock>
        }
    </div>
</div>

@code {
    [Parameter]
    public int UserId { get; set; }

    private TransactionModule userTransactions { get; set; }
    private Client user { get; set; }

    private Role clientRole { get; set; }

    private List<ChartDataIntrop> test = new List<ChartDataIntrop>()
{
        new ChartDataIntrop("1", 150),
        new ChartDataIntrop("2", 350),
        new ChartDataIntrop("3", 1850),
        new ChartDataIntrop("4", 13512),
        new ChartDataIntrop("5", 44580),
        new ChartDataIntrop("6", 16530),
        new ChartDataIntrop("7", 18912),
        new ChartDataIntrop("8", 103872),
        new ChartDataIntrop("9", 1150),
        new ChartDataIntrop("10", 1920),
        new ChartDataIntrop("11", 0),
        new ChartDataIntrop("12", 11),
        new ChartDataIntrop("13", 5550),
        new ChartDataIntrop("14", 31212)
    };

    public override async Task OnInitializedComponent() => await GeneralInitializaton();

    private async Task GeneralInitializaton()
    {
        try
        {
            user = await _userServices.FindUserById(UserId);

            if (user != null)
            {
                userTransactions = await _transactionServices.GetEntityTransaction(user, _rawHtmlizer, 12);

                clientRole = await _roleServices.GetClientRole(user);

                await ChangePageLoadStatus(true);
                StateHasChanged();

                await _js.InvokeVoidAsync("uiUtilsModule", "MaxHeightLoader");

                await _js.InvokeVoidAsync("chartModule", "DestroyChart", "user-profile-balance");
                await _js.InvokeVoidAsync("chartModule", "GenerateChart", "userBalanceChart", "user-profile-balance", (int)((test.Max(m => m.Data) - test.Min(m => m.Data)) / 6));

                await _js.InvokeVoidAsync("chartModule", "AddSingleData", "user-profile-balance", 0, test);

                StateHasChanged();
            }
            else await _virtualNavigationServices.ReRedirectClient(VirtualNavigationServices.errorUrl + 404, hardLoad: true);
        }
        catch (Exception) { }
    }

    protected async override Task OnInitializedAsync()
    {
        await _js.InvokeVoidAsync("loadSciptsModule", "loadScript", "libs/chart.js/chart.min.js");

        _virtualNavigationServices.SetPageInformationForEnchantedNavigation(this);

        await GeneralInitializaton();
    }
}
