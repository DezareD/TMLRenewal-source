@page "/apanel/roles"

@inherits RenewalTMLComponentBase

@inject IAdminActionServices _adminActionServices
@inject ISystemConfigurationServices _systemConfiguration

    <div class="block p-normal">
        <div class="admin-header">
            <p class="header-name">Роли</p>
            <Button @onclick="ShowRoleAddModal" Class="primary normal icon">
                <ChildContent>Создать роль<i class="fal fa-plus"></i></ChildContent>
            </Button>
        </div>
        <div class="admin-page">
            @if (RoleList != null)
            {
                <div class="outoftable">
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHeaderCell>#</TableHeaderCell>
                                <TableHeaderCell>Название роли</TableHeaderCell>
                                <TableHeaderCell>Действия</TableHeaderCell>
                                <TableHeaderCell>Количество аккаунтов с данной роль</TableHeaderCell>
                                <TableHeaderCell>Имеет ли доступ к сайту?</TableHeaderCell>
                                <TableHeaderCell>Имеет ли доступ к админ-панеле?</TableHeaderCell>
                                <TableHeaderCell>Имеет ли доступ к редактированию ролей?</TableHeaderCell>
                                <TableHeaderCell>Имеет ли доступ к модерированию транзакций?</TableHeaderCell>
                                <TableHeaderCell>Может ли просматривать список пользователей?</TableHeaderCell>
                                <TableHeaderCell>Может ли модерировать аккаунты?</TableHeaderCell>
                                <TableHeaderCell>Может ли администрировать аккаунты?</TableHeaderCell>
                                <TableHeaderCell>Имеет ли доступ к премиальному редактору?</TableHeaderCell>
                                <TableHeaderCell>Имеет ли доступ к админскому редактору?</TableHeaderCell>
                                <TableHeaderCell>Заблокированы ли экономические действия?</TableHeaderCell>
                                <TableHeaderCell>Можно ли просматривать настройки сайта?</TableHeaderCell>
                                <TableHeaderCell>Можно ли менять системные настройки сайта?</TableHeaderCell>
                                <TableHeaderCell>Можно ли менять экономические настройки сайта?</TableHeaderCell>
                                <TableHeaderCell>Есть ли доступ к выключенному сайту?</TableHeaderCell>
                                <TableHeaderCell>Скидка на процент перевода</TableHeaderCell>
                                <TableHeaderCell>Дополнительные деньги за лайк</TableHeaderCell>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            @foreach (var item in RoleList)
                            {
                            <TableRow>
                                <TableRowCell>@item.role.Id</TableRowCell>
                                <TableRowCell>@item.role.RoleName</TableRowCell>

                                <TableRowCell>
                                    <div class="centred-table admin-badges-panel">
                                        @if (String.IsNullOrEmpty(item.role.RequereName))
                                        {
                                            <div class="a-badge a-delete" @onclick="() => ShowRoleDeleteModal(item.role.Id)"><i class="fal fa-minus-circle"></i></div>
                                        }
                                        <div class="a-badge a-edit" @onclick="() => ShowRoleEditModal(item.role.Id)"><i class="fal fa-cog"></i></div>
                                    </div>
                                </TableRowCell>

                                <TableRowCell>@item.UserCount</TableRowCell> <!-- TODO: Сделать кликабельным, что бы выдавалсь панель список пользователей -->
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveAccessToSite" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveAccesToAdminPanel" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveAccesToEditRoles" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveToModerateTransactions" Disabled="true" TValue="bool"></Check></div></TableRowCell>

                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveToViewUserList" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveToModerateUserAccount" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveToAdministrateUserAccount" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveAccesToPremiumEditor" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveAccesToUltimateEditor" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isBlockedEconomic" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveAccesToViewSystemSettings" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveAccesToEditSettings_System" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveAccesToEditSettings_Economic" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell><div class="disabled-cb centred-table"><Check Class="disabled" @bind-Checked="item.role.isHaveAccesToOfflineSite" Disabled="true" TValue="bool"></Check></div></TableRowCell>
                                <TableRowCell>@item.role.OffToExchange%</TableRowCell>
                                <TableRowCell>@item.role.AddMoneyLikesRequest</TableRowCell>

                            </TableRow>
                            }
                        </TableBody>
                    </Table>
                </div>
            }
            else
            {
                <div class="loader-wrapper"><div class="btn-loader page"></div></div>
            }
        </div>
    </div>

    <!-- MODALS  -->

    <Modal @ref="modalRef">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>Изменить роль</ModalTitle>
                <i class="modal_x fal fa-times" @onclick="HideRoleEditModal"></i>
            </ModalHeader>
            <ModalBody>
                @if (_editRoleModule != null)
                {
                    @if (EditRoleValidationBlock != null && EditRoleValidationBlock.isShow)
                    {
                        <div>
                            <ValidationBlock block="EditRoleValidationBlock" />
                        </div>
                    }
                        <Validations @ref="_editRoleModule._validationContext" Model="@_editRoleModule._model" Mode="ValidationMode.Auto" ValidateOnLoad="false">
                            <Fields Class="modal-form-wrapper">
                                <Field>
                                    <Validation @ref="@_editRoleModule._fieldValidationStatus["Name"]">
                                        <TextEdit @bind-Text="_editRoleModule._model.Name" Placeholder="Имя роли">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </TextEdit>
                                    </Validation>
                                </Field>
                                <Field>
                                    <Validation @ref="@_editRoleModule._fieldValidationStatus["Class"]">
                                        <TextEdit @bind-Text="_editRoleModule._model.Class" Placeholder="Стиль роли">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </TextEdit>
                                    </Validation>
                                </Field>
                                <p class="modal-fields-separator-text">Основное:</p>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveAccessToSite" TValue="bool">Есть ли доступ к сайту?</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveAccesToPremiumEditor" TValue="bool">Есть ли доступ к премиуальному редактору?</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveAccesToUltimateEditor" TValue="bool">Есть ли доступ к административному редактору?</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveAccesToOfflineSite" TValue="bool">Есть ли доступ к выключенному сайту?</Check>
                                </Field>
                                <p class="modal-fields-separator-text">Админ-панель:</p>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveAccesToAdminPanel" TValue="bool">Есть ли доступ к админ-панеле? ( Видна ли возможность зайти в админ-панель, но при этом все админ-функции могут быть отключены ).</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveAccesToEditRoles" TValue="bool">Есть ли доступ к редактированию ролей?</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveToViewUserList" TValue="bool">Есть ли доступ к просмотру списку пользователей?</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveToModerateUserAccount" TValue="bool">Есть ли доступ к модерированию пользователей?</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveToAdministrateUserAccount" TValue="bool">Есть ли доступ к администрированию пользователей?</Check>
                                </Field>
                                <p class="modal-fields-separator-text">Экономика и системы:</p>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveToModerateTransaction" TValue="bool">Есть ли доступ к модерированию транзакций.</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isBlockedEconomic" TValue="bool">Заблокированы ли эконом. действия?.</Check>
                                </Field>
                                <p class="modal-fields-separator-text">Настройки сайта:</p>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveAccesToViewSystemSettings" TValue="bool">Можно ли смотреть настройки сайта.</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveAccesToEditSettings_System" TValue="bool">Есть ли возможность редактировать системные настройки сайта.</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_editRoleModule._model.isHaveAccesToEditSettings_Economic" TValue="bool">Есть ли возможность редактировать экономические настройки сайта.</Check>
                                </Field>
                                @if(_createRoleModule._model.isBlockedEconomic == false)
                                {
                                    <p class="modal-fields-separator-text">Премиум:</p>
                                    <Field>
                                    <Validation @ref="@_editRoleModule._fieldValidationStatus["OffToExchange"]">
                                        <p class="form-note mdl req">Уменьшение процентов при переводе:</p>
                                        <NumericEdit @bind-Value="_editRoleModule._model.OffToExchange" Placeholder="Введите количество" TValue="double">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </NumericEdit>
                                        <span class="secondary-text-modal">Налоговая ставка на перевод на сайте: @MainTaxTransfer%.</span>
                                    </Validation>
                                    </Field>
                                    <Field>
                                    <Validation @ref="@_editRoleModule._fieldValidationStatus["AddMoneyLikesRequest"]">
                                        <p class="form-note mdl req">Дополнительный деньги при запросе за лайки:</p>
                                        <NumericEdit @bind-Value="_editRoleModule._model.AddMoneyLikesRequest" Placeholder="Введите количество" TValue="int">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </NumericEdit>
                                    </Validation>
                                    </Field>
                                }
                            </Fields>
                        </Validations>
                }
            </ModalBody>
            <ModalFooter>
                <div class="footer-buttons" style="display: flex; justify-content: center;">
                    <Button Class="primary normal icon" Clicked="@EditModelExecuted" Loading="@isEditLoading">
                        <ChildContent>Изменить<i class="fal fa-cog"></i></ChildContent>
                        <LoadingTemplate><div class="btn-loader"></div></LoadingTemplate>
                    </Button>
                    <Button Class="primary outline icon" Clicked="@HideRoleEditModal">
                        <ChildContent>Отменить</ChildContent>
                    </Button>
                </div>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <Modal @ref="modalRefAddRole">
        <ModalContent Centered="true">
            <ModalHeader>
                <ModalTitle>Добавить роль</ModalTitle>
                <i class="modal_x fal fa-times" @onclick="HideRoleAddModal"></i>
            </ModalHeader>
            <ModalBody>
                @if (_createRoleModule != null)
                {
                    @if (AddRoleValidationBlock != null && AddRoleValidationBlock.isShow)
                    {
                        <div>
                            <ValidationBlock block="AddRoleValidationBlock" />
                        </div>
                    }
                        <Validations @ref="_createRoleModule._validationContext" Model="_createRoleModule._model" Mode="ValidationMode.Auto" ValidateOnLoad="false">
                            <Fields Class="modal-form-wrapper">
                                <Field>
                                    <Validation @ref="@_createRoleModule._fieldValidationStatus["Name"]">
                                        <TextEdit @bind-Text="_createRoleModule._model.Name" Placeholder="Имя роли">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </TextEdit>
                                    </Validation>
                                </Field>
                                <Field>
                                    <Validation @ref="@_createRoleModule._fieldValidationStatus["Class"]">
                                        <TextEdit @bind-Text="_createRoleModule._model.Class" Placeholder="Стиль роли">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </TextEdit>
                                    </Validation>
                                </Field>
                                <p class="modal-fields-separator-text">Основное:</p>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveAccessToSite" TValue="bool">Есть ли доступ к сайту?</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveAccesToPremiumEditor" TValue="bool">Есть ли доступ к премиуальному редактору?</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveAccesToUltimateEditor" TValue="bool">Есть ли доступ к административному редактору?</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveAccesToOfflineSite" TValue="bool">Есть ли доступ к выключенному сайту?</Check>
                                </Field>
                                <p class="modal-fields-separator-text">Админ-панель:</p>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveAccesToAdminPanel" TValue="bool">Есть ли доступ к админ-панеле? ( Видна ли возможность зайти в админ-панель, но при этом все админ-функции могут быть отключены ).</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveAccesToEditRoles" TValue="bool">Есть ли доступ к редактированию ролей?</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveToViewUserList" TValue="bool">Есть ли доступ к просмотру списку пользователей?</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveToModerateUserAccount" TValue="bool">Есть ли доступ к модерированию пользователей?</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveToAdministrateUserAccount" TValue="bool">Есть ли доступ к администрированию пользователей?</Check>
                                </Field>
                                <p class="modal-fields-separator-text">Экономика и системы:</p>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveToModerateTransaction" TValue="bool">Есть ли доступ к модерированию транзакций.</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isBlockedEconomic" TValue="bool">Заблокированы ли эконом. действия?.</Check>
                                </Field>
                                <p class="modal-fields-separator-text">Настройки сайта:</p>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveAccesToViewSystemSettings" TValue="bool">Можно ли смотреть настройки сайта.</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveAccesToEditSettings_System" TValue="bool">Есть ли возможность редактировать системные настройки сайта.</Check>
                                </Field>
                                <Field>
                                    <Check @bind-Checked="_createRoleModule._model.isHaveAccesToEditSettings_Economic" TValue="bool">Есть ли возможность редактировать экономические настройки сайта.</Check>
                                </Field>
                                @if(_createRoleModule._model.isBlockedEconomic == false)
                                {
                                    <p class="modal-fields-separator-text">Премиум:</p>
                                    <Field>
                                    <Validation @ref="@_createRoleModule._fieldValidationStatus["OffToExchange"]">
                                        <p class="form-note mdl req">Уменьшение процентов при переводе:</p>
                                        <NumericEdit @bind-Value="_createRoleModule._model.OffToExchange" Placeholder="Введите количество" TValue="double">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </NumericEdit>
                                        <span class="secondary-text-modal">Налоговая ставка на перевод на сайте: @MainTaxTransfer%.</span>
                                    </Validation>
                                    </Field>
                                    <Field>
                                    <Validation @ref="@_createRoleModule._fieldValidationStatus["AddMoneyLikesRequest"]">
                                        <p class="form-note mdl req">Дополнительный деньги при запросе за лайки:</p>
                                        <NumericEdit @bind-Value="_createRoleModule._model.AddMoneyLikesRequest" Placeholder="Введите количество" TValue="int">
                                            <Feedback>
                                                <ValidationError />
                                            </Feedback>
                                        </NumericEdit>
                                    </Validation>
                                    </Field>
                                }
                            </Fields>
                        </Validations>
                }
            </ModalBody>
            <ModalFooter>
                <div class="footer-buttons" style="display: flex; justify-content: center;">
                    <Button Class="primary normal icon" Clicked="@AddModelExecuted" Loading="@isAddLoading">
                        <ChildContent>Создать<i class="fal fa-plus-circle"></i></ChildContent>
                        <LoadingTemplate><div class="btn-loader"></div></LoadingTemplate>
                    </Button>
                    <Button Class="primary outline icon" Clicked="@HideRoleAddModal">
                        <ChildContent>Отменить</ChildContent>
                    </Button>
                </div>
            </ModalFooter>
        </ModalContent>
    </Modal>

    <Modal @ref="modalRefDeleteRole">
        <ModalContent Centered="true" Size="ModalSize.Small">
            <ModalHeader>
                <i class="modal_x fal fa-times" @onclick="HideRoleDeleteModal"></i>
            </ModalHeader>
            <ModalBody>
                @if (deleteRole != null && deleteRole.role != null)
                {
                    @if (DeleteRoleValidationBlock != null && DeleteRoleValidationBlock.isShow)
                    {
                        <div>
                            <ValidationBlock block="DeleteRoleValidationBlock" />
                        </div>
                    }

                    <p class="modal-info">Вы действительно хотите удалить роль '@deleteRole.role.RoleName'?</p>
                    @if (deleteRole.UserCount > 0)
                    {
                        <p class="modal-info mini">Все пользователи (@deleteRole.UserCount Шт.) будут перенесены в группу обычных пользователей.</p>
                    }
                 }

                <!-- TODO: Сделать выбор роли, в которую перенесуться все пользователи из этой при удалении. -->
            </ModalBody>
            <ModalFooter>
                <div class="footer-buttons">
                    <Button Class="tertiary normal icon warning" Clicked="@DeleteModelExecuted" Loading="@isDeleterLoading">
                        <ChildContent>Удалить роль</ChildContent>
                        <LoadingTemplate><div class="btn-loader"></div></LoadingTemplate>
                    </Button>
                </div>
            </ModalFooter>
        </ModalContent>
    </Modal>


@code {
    private Modal modalRef { get; set; }
    private List<RoleEnchantedModel> RoleList { get; set; }

    private Modal modalRefAddRole { get; set; }
    private Modal modalRefDeleteRole { get; set; }

    /* Create role */
    private ContextValidationModule<RoleModel> _createRoleModule { get; set; }

    private bool isAddLoading { get; set; }
    private ValidationMessageBlock AddRoleValidationBlock { get; set; }

    /* Edit Role */
    private ContextValidationModule<RoleModel> _editRoleModule { get; set; }

    private bool isEditLoading { get; set; }
    private ValidationMessageBlock EditRoleValidationBlock { get; set; }

    /* Delete Role */
    private bool isDeleterLoading { get; set; }
    private RoleEnchantedModel deleteRole { get; set; }
    private ValidationMessageBlock DeleteRoleValidationBlock { get; set; }

    private Client adminView { get; set; }
    private double MainTaxTransfer { get; set; }

    public override async Task OnInitializedComponent()
    {
        adminView = await _userServices.GetClient();
        var role = await _roleServices.GetRoleAsync(adminView.RoleId);

        // todo isHaveToViewUserList
        if (role.isHaveAccesToAdminPanel && role.isHaveAccesToEditRoles)
        {
            RoleList = await _roleServices.GetAllEnchantedRoles();

            _createRoleModule = new ContextValidationModule<RoleModel>(new RoleModel());
            _editRoleModule = new ContextValidationModule<RoleModel>(new RoleModel());

            deleteRole = new RoleEnchantedModel();

            MainTaxTransfer = Convert.ToDouble(await _systemConfiguration.Get("economic_transfer.tax"));

            await ChangePageLoadStatus(true);
        }
        else await _virtualNavigationServices.ReRedirectClient(VirtualNavigationServices.accessDeniedUrl, hardLoad: true);
    }

    /* EDIT ROLE */

    private async Task EditModelExecuted()
    {
        isEditLoading = true;
        if (_editRoleModule._validationContext.ValidateAll())
        {
            try
            {
                _editRoleModule.SetFielAllStatus(ValidationStatus.None);
                StateHasChanged();

                var role = await _roleServices.GetRoleAsync(_editRoleModule._model.Id);

                role.RoleName = _editRoleModule._model.Name;
                role.RoleStyle = _editRoleModule._model.Class;
                role.isHaveAccessToSite = _editRoleModule._model.isHaveAccessToSite;
                role.isHaveAccesToAdminPanel = _editRoleModule._model.isHaveAccesToAdminPanel;
                role.isHaveAccesToEditRoles = _editRoleModule._model.isHaveAccesToEditRoles;
                role.isHaveToModerateTransactions = _editRoleModule._model.isHaveToModerateTransaction;

                role.isHaveToViewUserList = _editRoleModule._model.isHaveToViewUserList;
                role.isHaveToModerateUserAccount = _editRoleModule._model.isHaveToViewUserList;
                role.isHaveToAdministrateUserAccount = _editRoleModule._model.isHaveToAdministrateUserAccount;
                role.isHaveAccesToPremiumEditor = _editRoleModule._model.isHaveAccesToPremiumEditor;
                role.isHaveAccesToUltimateEditor = _editRoleModule._model.isHaveAccesToUltimateEditor;
                role.isBlockedEconomic = _editRoleModule._model.isBlockedEconomic;

                role.isHaveAccesToViewSystemSettings = _editRoleModule._model.isHaveAccesToViewSystemSettings;
                role.isHaveAccesToEditSettings_System = _editRoleModule._model.isHaveAccesToEditSettings_System;
                role.isHaveAccesToEditSettings_Economic = _editRoleModule._model.isHaveAccesToEditSettings_Economic;

                role.isHaveAccesToOfflineSite = _editRoleModule._model.isHaveAccesToOfflineSite;

                if(role.isBlockedEconomic != true)
                {
                    role.OffToExchange = _editRoleModule._model.OffToExchange;
                    role.AddMoneyLikesRequest = _editRoleModule._model.AddMoneyLikesRequest;

                    var percemtal = await _systemConfiguration.GetByKey("economic_transfer.tax");

                    if(Convert.ToDouble(percemtal.Value) < _editRoleModule._model.OffToExchange)
                    {
                        EditRoleValidationBlock = new ValidationMessageBlock("Системный процент на перевод ниже скидки на процнт.", "error");
                        _editRoleModule.SetFieldStatus("OffToExchange", ValidationStatus.Error);
                        isEditLoading = false;
                        return;
                    }
                }

                if ((role.isHaveToViewUserList || role.isHaveAccesToEditRoles
                    || role.isHaveToModerateUserAccount || role.isHaveToAdministrateUserAccount
                    || role.isHaveAccesToViewSystemSettings || role.isHaveAccesToEditSettings_System
                    || role.isHaveAccesToEditSettings_Economic) && !role.isHaveAccesToAdminPanel)
                {
                    EditRoleValidationBlock = new ValidationMessageBlock("Вы дали админ-привилегии, но не дали доступ в админ-панель.", "error");
                    isEditLoading = false;
                    return;
                }

                if(!role.isHaveAccesToViewSystemSettings && (role.isHaveAccesToEditSettings_Economic || role.isHaveAccesToEditSettings_System))
                {
                    EditRoleValidationBlock = new ValidationMessageBlock("Вы дали возможность просмотра настроек, но ни одна из категорий не выбрана.", "error");
                    isEditLoading = false;
                    return;
                }

                await _roleServices.UpdateRole(role);

                await _adminActionServices.CreateAdminTransaction(new AdminAction()
                {
                    AdminId = adminView.Id,
                    Date = DateTimeAddon.NowDateTimeStrings(),
                    HtmlText = "Администратор произвел изменения над ролью: '" + role.RoleName + "'.",
                    Icon = "fa users",
                    Priority = 2,
                    Type = "{to:system}"
                });

                RoleList = await _roleServices.GetAllEnchantedRoles();

                HideRoleEditModal();
            }
            catch (Exception)
            {
                EditRoleValidationBlock = new ValidationMessageBlock("Ошибка обновления роли.", "error");
            }
        }
        isEditLoading = false;
    }

    private async Task ShowRoleEditModal(int id)
    {
        var role = await _roleServices.GetRoleAsync(id);

        _editRoleModule._model = new RoleModel()
        {
            Id = role.Id,
            isHaveAccessToSite = role.isHaveAccessToSite,
            isHaveAccesToAdminPanel = role.isHaveAccesToAdminPanel,
            isHaveAccesToEditRoles = role.isHaveAccesToEditRoles,
            isHaveToModerateTransaction = role.isHaveToModerateTransactions,
            isHaveAccesToPremiumEditor = role.isHaveAccesToPremiumEditor,
            isHaveAccesToUltimateEditor = role.isHaveAccesToUltimateEditor,
            isHaveToAdministrateUserAccount = role.isHaveToAdministrateUserAccount,
            isHaveToModerateUserAccount = role.isHaveToModerateUserAccount,
            isHaveToViewUserList = role.isHaveToViewUserList,
            isBlockedEconomic = role.isBlockedEconomic,
            isHaveAccesToEditSettings_Economic = role.isHaveAccesToEditSettings_Economic,
            isHaveAccesToEditSettings_System = role.isHaveAccesToEditSettings_System,
            isHaveAccesToViewSystemSettings = role.isHaveAccesToViewSystemSettings,
            Name = role.RoleName,
            isHaveAccesToOfflineSite = role.isHaveAccesToOfflineSite,
            OffToExchange = role.OffToExchange,
            AddMoneyLikesRequest = role.AddMoneyLikesRequest,
            Class = role.RoleStyle
        };

        modalRef.Show();
    }

    private void HideRoleEditModal()
    {
        _editRoleModule.SetFielAllStatus(ValidationStatus.None);
        _editRoleModule._model = new RoleModel();
        EditRoleValidationBlock = null;
        modalRef.Hide();
    }

    /* ADD ROLE */

    private async Task AddModelExecuted()
    {
        isAddLoading = true;

        if (_createRoleModule._validationContext.ValidateAll())
        {
            try
            {
                _createRoleModule.SetFielAllStatus(ValidationStatus.None);
                StateHasChanged();

                if(_createRoleModule._model.isBlockedEconomic == false)
                {
                    var percemtal = await _systemConfiguration.GetByKey("economic_transfer.tax");

                    if(Convert.ToDouble(percemtal.Value) < _createRoleModule._model.OffToExchange)
                    {
                        AddRoleValidationBlock = new ValidationMessageBlock("Системный процент на перевод ниже скидки на процнт.", "error");
                        _createRoleModule.SetFieldStatus("OffToExchange", ValidationStatus.Error);
                        isAddLoading = false;
                        return;
                    }
                }

                if ((_createRoleModule._model.isHaveToViewUserList || _createRoleModule._model.isHaveAccesToEditRoles
                    || _createRoleModule._model.isHaveToModerateUserAccount || _createRoleModule._model.isHaveToAdministrateUserAccount
                    || _createRoleModule._model.isHaveAccesToViewSystemSettings || _createRoleModule._model.isHaveAccesToEditSettings_System
                    || _createRoleModule._model.isHaveAccesToEditSettings_Economic) && !_createRoleModule._model.isHaveAccesToAdminPanel)
                {
                    AddRoleValidationBlock = new ValidationMessageBlock("Вы дали админ-привилегии, но не дали доступ в админ-панель.", "error");
                    isAddLoading = false;
                    return;
                }


                if (!_createRoleModule._model.isHaveAccesToViewSystemSettings && (_createRoleModule._model.isHaveAccesToEditSettings_Economic || _createRoleModule._model.isHaveAccesToEditSettings_System))
                {
                    AddRoleValidationBlock = new ValidationMessageBlock("Вы дали возможность просмотра настроек, но ни одна из категорий не выбрана.", "error");
                    isEditLoading = false;
                    return;
                }

                var role = new Role()
                {
                    RequereName = "",
                    isHaveAccessToSite = _createRoleModule._model.isHaveAccessToSite,
                    isHaveAccesToAdminPanel = _createRoleModule._model.isHaveAccesToAdminPanel,
                    isHaveAccesToEditRoles = _createRoleModule._model.isHaveAccesToEditRoles,
                    isHaveToModerateTransactions = _createRoleModule._model.isHaveToModerateTransaction,
                    isHaveAccesToPremiumEditor = _createRoleModule._model.isHaveAccesToPremiumEditor,
                    isHaveAccesToUltimateEditor = _createRoleModule._model.isHaveAccesToUltimateEditor,
                    isHaveToAdministrateUserAccount = _createRoleModule._model.isHaveToAdministrateUserAccount,
                    isHaveToModerateUserAccount = _createRoleModule._model.isHaveToModerateUserAccount,
                    isHaveToViewUserList = _createRoleModule._model.isHaveToViewUserList,
                    isBlockedEconomic = _createRoleModule._model.isBlockedEconomic,
                    isHaveAccesToEditSettings_Economic = _createRoleModule._model.isHaveAccesToEditSettings_Economic,
                    isHaveAccesToEditSettings_System = _createRoleModule._model.isHaveAccesToEditSettings_System,
                    isHaveAccesToViewSystemSettings = _createRoleModule._model.isHaveAccesToViewSystemSettings,
                    isHaveAccesToOfflineSite = _createRoleModule._model.isHaveAccesToOfflineSite,
                    RoleName = _createRoleModule._model.Name,
                    RoleStyle = _createRoleModule._model.Class,
                    AddMoneyLikesRequest = _createRoleModule._model.AddMoneyLikesRequest,
                    OffToExchange = _createRoleModule._model.OffToExchange
                };

                await _roleServices.CreateRole(role);

                await _adminActionServices.CreateAdminTransaction(new AdminAction()
                {
                    AdminId = adminView.Id,
                    Date = DateTimeAddon.NowDateTimeStrings(),
                    HtmlText = "Администратор создал роль: '" + role.RoleName + "'.",
                    Icon = "fa users",
                    Priority = 2,
                    Type = "{to:system}"
                });

                RoleList = await _roleServices.GetAllEnchantedRoles();

                HideRoleAddModal();
            }
            catch (Exception)
            {
                DeleteRoleValidationBlock = new ValidationMessageBlock("Ошибка удаления роли.", "error");
            }
        }

        isAddLoading = false;
    }

    private void ShowRoleAddModal()
    {
        _createRoleModule._model = new RoleModel() { };

        modalRefAddRole.Show();
    }

    private void HideRoleAddModal()
    {
        _createRoleModule.SetFielAllStatus(ValidationStatus.None);
        _createRoleModule._model = new RoleModel();
        AddRoleValidationBlock = null;
        modalRefAddRole.Hide();
    }

    /* DELETE ROLE */

    private async Task DeleteModelExecuted()
    {
        isDeleterLoading = true;

        try
        { 
            await _adminActionServices.CreateAdminTransaction(new AdminAction()
            {
                AdminId = adminView.Id,
                Date = DateTimeAddon.NowDateTimeStrings(),
                HtmlText = "Администратор удалил роль: '" + deleteRole.role.RoleName + "'.",
                Icon = "fa users",
                Priority = 2,
                Type = "{to:system}"
            });

            await _roleServices.RebaseBeforeDelete(deleteRole.role.Id);
            await _roleServices.DeleteRole(deleteRole.role);

            RoleList = await _roleServices.GetAllEnchantedRoles();

            HideRoleDeleteModal();
        }
        catch (Exception)
        {
            AddRoleValidationBlock = new ValidationMessageBlock("Ошибка удаления роли.", "error");
        }

        isDeleterLoading = false;
    }

    private async Task ShowRoleDeleteModal(int id)
    {
        deleteRole = new RoleEnchantedModel();

        deleteRole.role = await _roleServices.GetRoleAsync(id);
        deleteRole.UserCount = await _userServices.GetCountClientByRoleId(deleteRole.role.Id);

        modalRefDeleteRole.Show();
    }

    private void HideRoleDeleteModal()
    {
        deleteRole = new RoleEnchantedModel();
        DeleteRoleValidationBlock = null;

        modalRefDeleteRole.Hide();
    }
}
